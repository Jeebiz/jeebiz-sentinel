<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	
	<groupId>net.jeebiz</groupId>
	<artifactId>jeebiz-sentinel</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	
	<properties>
	
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.module>${project.artifactId}</project.module>
		<java.version>1.8</java.version>
		<maven.version>3.0</maven.version>
	    
	    <addClasspath>false</addClasspath>
		<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
        <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
		<addExtensions>false</addExtensions>
		<classpathPrefix>lib/</classpathPrefix>
	    
	    <!-- 生成部署脚本参数 -->
		<appassembler-dir>${project.build.directory}/generated-resources/appassembler</appassembler-dir>
		<appassembler-jsw-dir>${project.build.directory}/generated-resources/appassembler/jsw</appassembler-jsw-dir>
		<appassembler-bin-fileName>jeebiz-boot</appassembler-bin-fileName>
		
		<!-- Maven Plugin versions -->
		<maven-appassembler-plugin.version>2.1.0</maven-appassembler-plugin.version>
		<sentinel-dashboard.version>1.8.1</sentinel-dashboard.version>
		
		
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<build>
		<pluginManagement>
			<plugins>
				
				<!-- Spring Boot 应用可实施应用构建：脚本模式、服务模式、Docker模式 -->
				
				<!-- http://www.mojohaus.org/appassembler/appassembler-maven-plugin -->
				<plugin>
					<!-- Java应用程序可执行脚本生成：http://blog.csdn.net/mn960mn/article/details/51554152 -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>appassembler-maven-plugin</artifactId>
					<version>${maven-appassembler-plugin.version}</version>
					<executions>
						<execution>
							<id>make-assembly</id>
							<phase>package</phase>
							<goals>
								<goal>assemble</goal>
							</goals>
						</execution>
						<execution>
							<id>make-daemons</id>
							<phase>package</phase>
							<goals>
								<goal>generate-daemons</goal>
							</goals>
						</execution>
					</executions>
					<configuration>

						<!-- 脚本模式、进程模式 通用参数 -->

						<!-- The name of the target directory for configuration files. Prior to version 1.7 this value defaults to 'conf' for assemble goal and 'etc' for generate-daemons Default value is: etc. -->
						<configurationDirectory>conf</configurationDirectory>
						<!-- The source directory for configuration files. Default value is: src/main/config. -->
			          	<!-- 从哪里拷贝配置文件 (默认src/main/config) -->
						<configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
						<!-- If the source configuration directory should be copied to the configured configurationDirectory.Default value is: false. -->
						<!-- 是否拷贝配置文件到上面的目录中;因为Spring-Boot资源不需要全部拷贝，这里交由antrun插件帮我们部分进行拷贝 -->
						<copyConfigurationDirectory>false</copyConfigurationDirectory>

						<!-- The character encoding scheme to be applied when filtering the source configuration directory.
							 Default value is: ${project.build.sourceEncoding}. -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!-- $BASEDIR/bin目录中的启动脚本执行前调用的脚本名称，用于设置环境变量，类似Tomcat的setenv。 注意：仅适用于jsw平台。如果这个可选的环境文件也设置了WRAPPER_CONF_OVERRIDES变量，它将被传递给JSW本机启动器的命令行参数， 
							以覆盖wrapper.conf的属性。有关详细信息，请参阅http://wrapper.tanukisoftware.com/doc/english/props-command-line.html。 -->
						<environmentSetupFileName>setenv</environmentSetupFileName>
						<!-- 此字符串前面的表达式将不会被更改。 如 \${foo}将被${foo}替换。 -->
						<escapeString>#</escapeString>
						<!-- 是否源配置目录应该被复制到配置的配置目录中。此配置可以由更通用的preAssembleDirectory选项替换 -->
						<filterConfigurationDirectory>true</filterConfigurationDirectory>
						<!-- 是否源预装配时复制到配置的目录应过滤assembleDirectory。 -->
						<filterPreAssembleDirectory>true</filterPreAssembleDirectory>
						<!-- 是否拷贝Maven依赖jar;因为Spring-Boot已经将依赖的jar打包到最终工程，这里指定不需要拷贝 -->
						<generateRepository>false</generateRepository>
						<!-- 您可以定义一个许可证头文件，该文件将替代生成的脚本中的默认头文件。 <licenseHeaderFile></licenseHeaderFile> -->
						<!-- 项目的日志目录。如果为此参数指定一个值，将创建一个名为给定的空目录 -->
						<logsDirectory>logs</logsDirectory>
						<!-- <licenseHeaderFile>${basedir}/license-header.txt</licenseHeaderFile> -->
						<!-- 将库复制到存储库时使用的文件名映射。如果没有设置文件映射（默认），则使用其标准名称复制文件。注意：如果使用此参数，则将 忽略useTimestampInSnapshotFileName参数。 -->
						<!-- <outputFileNameMapping></outputFileNameMapping> -->
						<!-- 如果存在，请将此目录的内容复制到配置的 assembleDirectory，并使用选项进行过滤。此配置可以替代copyConfigurationDirectory 
							<preAssembleDirectory></preAssembleDirectory> -->
						<!-- 生成的Maven仓库的布局。支持的类型 - “默认”（Maven2）| “遗产”（Maven1）| “平”（flat lib 
							/ style）。 只有当您运行在Maven 2.2.1之前，才支持“legacy”样式。 说明： 如果拷贝Maven依赖jar;则对应的lib目录中jar的存放规则，默认是${groupId}/${artifactId}的目录格式，flat表示直接把jar放到lib目录 -->
						<repositoryLayout>flat</repositoryLayout>
						<!-- 打包的jar,以及maven依赖的jar存储的目录（相对于assembleDirectory） -->
						<repositoryName>lib</repositoryName>
						<!-- 项目的临时目录。如果为此参数指定一个值，将创建一个名为给定的空目录。 -->
						<tempDirectory>tmp</tempDirectory>
						<!-- 生成的脚本的unix模板。它可以是文件或资源路径。如果没有给出，使用内部的。小心使用，因为它不能保证与新的插件版本兼容。 -->
						<!-- <unixScriptTemplate></unixScriptTemplate> -->
						<!-- For those snapshots downloaded from a remote repo, replace the timestamp part with "SNAPSHOT" instead. Default value is: true.。 -->
						<useTimestampInSnapshotFileName>true</useTimestampInSnapshotFileName>
						<!-- 有时候，有许多依赖关系意味着有一个非常长的类路径，并且变得太长（特别是在基于Windows的平台上）。这种选择可以帮助这种情况。 
							  如果激活此选项，您的类路径只包含一个类路径通配符（REPO/*）。但请注意，这仅适用于Java 1.6及更高版本,且 repositoryLayout=flat的情况。 -->
						<useWildcardClassPath>true</useWildcardClassPath>
						<!-- 生成脚本的windows模板。它可以是文件或资源路径。如果没有给出，使用内部的。小心使用，因为它不能保证与新的插件版本兼容。 
							<windowsScriptTemplate></windowsScriptTemplate> -->

						<!-- 命令模式 : http://www.mojohaus.org/appassembler/appassembler-maven-plugin/assemble-mojo.html -->

						<!-- 生成的执行脚本存放目录；默认${project.build.directory}/appassembler.（必填参数） -->
						<assembleDirectory>${project.build.directory}/generated-resources/appassembler/${project.artifactId}</assembleDirectory>
						<!-- 用于bin文件的文件扩展名。文件扩展名存储在使用平台名称作为键的地图中。要将Unix bin文件的文件扩展名更改为“.sh”，请使用此配置： -->
						<binFileExtensions>
							<unix>.sh</unix>
						</binFileExtensions>
						<!-- Define the name of binary folder. Default value is: bin. -->
						<binFolder>bin</binFolder>
						<!-- 以下可用于使用所有项目依赖关系，而不是 仅代表运行时依赖关系的默认行为。 -->
						<!-- <extraJvmArguments>-Xms256M -Xmn512M -Xmx512M -Xss128k -XX:MetaspaceSize=64M -XX:MaxMetaspaceSize=512M</extraJvmArguments> -->
						<!-- 如果configurationDirectory（默认情况下）应包含在生成的bin文件的类路径的开始。（注意：该配置指定外部配置文件路径，如不配置可能导致无法启动） -->
						<includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
						
						<!-- 将生成bin文件的一组程序配置（必填参数） -->
						<programs>
							<program>
								<id>${appassembler-bin-fileName}</id>
								<!-- 生成的脚本文件的名称，比如start.sh,你也可以根据你的需要命名成其他名字 -->
								<!-- <licenseHeaderFile></licenseHeaderFile> -->
								<!--指定主类，脚本名。会生成shell/bat两种类型,也可用platforms指定运行平台 -->
								<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>
								<!-- 插件将会为其生成bin文件的默认平台。使用字符串值进行配置 - “全部”（默认/空）| “windows”| “UNIX”。 -->
								<platforms>
									<platform>windows</platform>
									<platform>unix</platform>
								</platforms>
								<jvmSettings>
									<!-- <systemProperties>
										<systemProperty></systemProperty>
										<systemProperty></systemProperty>
									</systemProperties> -->
									<!-- http://www.cnblogs.com/paddix/p/5309550.html -->
									<!-- http://unixboy.iteye.com/blog/174173/ -->
									<!-- https://www.cnblogs.com/wgslucky/p/11764769.html -->
									<extraArguments>
										<!-- 后台服务运行 -->
										<extraArgument>-server</extraArgument>
										<!-- 设置年轻代大小为512M。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。
											   持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。
											   此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。 
										-->
										<extraArgument>-Xmn512M</extraArgument>	
										<!-- 设置JVM促使内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。  -->
										<extraArgument>-Xms1024M</extraArgument>
										<!-- 设置JVM最大可用内存为1024M -->
										<extraArgument>-Xmx1024M</extraArgument>
										<!-- 初始元空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值。 -->
										<extraArgument>-XX:MetaspaceSize=512M</extraArgument>
										<!-- 最大空间，默认是没有限制的 -->
										<extraArgument>-XX:MaxMetaspaceSize=512M</extraArgument>
										<!-- 设置年轻代初始值为256M，表示新生代初始内存的大小，应该小于-Xms的值； -->
										<!-- <extraArgument>-XX:NewSize=256M</extraArgument> -->
										<!-- 设置年轻代最大值为512M，表示新生代可被分配的内存的最大上限；当然这个值应该小于-Xmx的值； -->
										<!-- <extraArgument>-XX:MaxNewSize=512M</extraArgument> -->
										<!-- 设置年轻代中Eden区与一个Survivor区的比值。表示Edgen为一个Survivor的4倍，即1个Survivor区占整个年轻代大小的1/6 -->
										<extraArgument>-XX:SurvivorRatio=4</extraArgument>
										<!-- 设置老年代与年轻代（包括1个Eden和2个Survivor区）的比值。表示老年代是年轻代的4倍 -->
										<extraArgument>-XX:NewRatio=4</extraArgument>
										<!-- 设置让大于此阈值的对象直接分配在老年代（只对Serial、ParNew收集器有效），单位为字节 -->
										<!-- <extraArgument>-XX:PretenureSizeThreadshold=1024</extraArgument> -->
										<!-- 指定使用G1圾收集器 -->
										<extraArgument>-XX:+UseG1GC</extraArgument>
										<!-- 解锁实验性虚拟机标志 -->
										<extraArgument>-XX:+UnlockExperimentalVMOptions</extraArgument>
										<extraArgument>-XX:+UnlockDiagnosticVMOptions</extraArgument>
										<!-- 设置的 G1 区域的大小.值是 2 的幂,范围是 1 MB 到 32 MB 之间.目标是根据最小的 Java 堆大小划分出约 2048 个区域. -->
										<extraArgument>-XX:G1HeapRegionSize=8</extraArgument>
										<!-- 为所需的最长暂停时间, 设置目标值.默认值是 200 毫秒.如果MaxGCPauseMillis设置的过小,GC就会频繁,吞吐量就会下降.如果MaxGCPauseMillis设置的过大,应用程序暂停时间就会变长.G1的默认暂停时间是200毫秒. -->
										<extraArgument>-XX:MaxGCPauseMillis=200</extraArgument>
										<!-- 设置要用作年轻代大小最小值的堆百分比.默认值是 Java 堆的 5%.这是一个实验性的标志.有关示例,请参见“如何解锁实验性虚拟机标志”.此设置取代了 -XX:DefaultMinNewGenPercent 设置.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1NewSizePercent=5</extraArgument>
										<!-- # 设置要用作年轻代大小最大值的堆大小百分比.默认值是 Java 堆的 60%.这是一个实验性的标志.此设置取代了 -XX:DefaultMaxNewGenPercent 设置.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1MaxNewSizePercent=60</extraArgument>
										<!-- 配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等。 -->
										<!-- 设置 STW 工作线程数的值.将 n 的值设置为逻辑处理器的数量 .n 的值与逻辑处理器的数量相同,最多为 8. -->
										<!-- 如果逻辑处理器不止八个,则将 n 的值设置为逻辑处理器数的 5/8 左右.这适用于大多数情况, 除非是较大的 SPARC 系统,其中 n 的值可以是逻辑处理器数的 5/16 左右. -->
										<extraArgument>-XX:ParallelGCThreads=8</extraArgument>
										<!-- 设置并行标记的线程数.将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 1/4 左右. -->
										<extraArgument>-XX:ConcGCThreads=2</extraArgument>
										<!-- 设置触发标记周期的 Java 堆占用率阈值.默认占用率是整个 Java 堆的 45%. -->
										<extraArgument>-XX:InitiatingHeapOccupancyPercent=45</extraArgument>
										<!-- 为混合垃圾回收周期中要包括的旧区域设置占用率阈值.默认占用率为 65%.这是一个实验性的标志.此设置取代了 -XX:G1OldCSetRegionLiveThresholdPercent 设置.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1MixedGCLiveThresholdPercent=65</extraArgument>
										<!-- 设置您愿意浪费的堆百分比.如果可回收百分比小于堆废物百分比,Java HotSpot VM 不会启动混合垃圾回收周期.默认值是 10%.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1HeapWastePercent=10</extraArgument>
										<!-- 设置标记周期完成后,对存活数据上限为 G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数.默认值是 8 次混合垃圾回收.混合回收的目标是要控制在此目标次数以内.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1MixedGCCountTarget=8</extraArgument>
										<!-- 设置混合垃圾回收期间要回收的最大旧区域数.默认值是 Java 堆的 10%.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1OldCSetRegionThresholdPercent=10</extraArgument>
										<!-- 设置作为空闲空间的预留内存百分比,以降低目标空间溢出的风险.默认值是 10%.增加或减少百分比时,请确保对总的 Java 堆调整相同的量.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1ReservePercent=10</extraArgument>
										<!-- 手动开启Java String对象的分割工作,这个是JDK8u20之后新增的参数,主要用于相同String避免重复申请内存,节约Region的使用； -->
										<extraArgument>-XX:+UseStringDeduplication</extraArgument>
										<!-- 关闭GC时间过长系统自动检测OOM(OutOfMemory)提示GC overhead limit exceeded,目的是显示内存溢出异常,方便Wrapper Service检测到并重启 -->
										<extraArgument>-XX:-UseGCOverheadLimit</extraArgument>
										<!-- 表示一个对象如果在Survivor区移动了7次那下次MinorGC时就进入老年代。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代，对于需要大量常驻内存的应用， 
											这样做可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象在年轻代存活时间，增加对象在年轻代被垃圾回收的概率， 
											减少Full GC的频率，可以在某种程度上提高服务稳定性。默认值:15 -->
										<extraArgument>-XX:MaxTenuringThreshold=10</extraArgument>
										<!-- 取消 内存整理，G1GC 天生优势 --> 
										<extraArgument>-XX:-ResizePLAB</extraArgument>
										<extraArgument>-XX:+PrintAdaptiveSizePolicy</extraArgument>
										<extraArgument>-XX:+ParallelRefProcEnabled</extraArgument>
										<extraArgument>-XX:+G1SummarizeConcMark</extraArgument>
										<!-- 开启GC日志，等同于-verbose:gc 表示打开简化的GC日志 -->
										<extraArgument>-XX:+PrintGC</extraArgument>
										<!-- 在发生垃圾回收时打印内存回收日志，并在进程退出时输出当前内存各区域分配情况 -->
										<extraArgument>-XX:+PrintGCDetails</extraArgument>
										<!-- 打印出GC发生的具体时间 -->
										<extraArgument>-XX:+PrintGCDateStamps</extraArgument>
										<extraArgument>-XX:+PrintGCApplicationStoppedTime</extraArgument> <!-- 打印应用停留时间  -->
										<!-- 让JVM在每次MinorGC后打印出当前使用的Survivor中对象的年龄分布  -->
										<extraArgument>-XX:+PrintTenuringDistribution</extraArgument> 
										<!-- -Xloggc:<file> 表示把GC日志写入到一个文件中去，而不是打印到标准输出中 -->
										<extraArgument>-Xloggc:logs/gc.log</extraArgument>
										<extraArgument>-XX:+UseGCLogFileRotation</extraArgument>
										<extraArgument>-XX:NumberOfGCLogFiles=10</extraArgument>
										<extraArgument>-XX:GCLogFileSize=20M</extraArgument>
										<!--  当堆内存空间溢出时输出堆的内存快照 -->
										<extraArgument>-XX:+HeapDumpOnOutOfMemoryError</extraArgument>
										<extraArgument>-XX:HeapDumpPath=logs/heap.log</extraArgument>
									</extraArguments>
								</jvmSettings>
							</program>
						</programs>
						
						<!-- 这可以用于将项目依赖、配置文件夹（等等）放置于类路径的第一个条目。默认行为是放在classpath的最后一个位置。 -->
						<projectArtifactFirstInClassPath>false</projectArtifactFirstInClassPath>
						<!-- 是否显示控制台 -->
						<showConsoleWindow>true</showConsoleWindow>
						<!-- 以下可用于使用所有项目依赖关系，而不是 仅代表运行时依赖关系的默认行为。 -->
						<useAllProjectDependencies>false</useAllProjectDependencies>
						
						<!-- 后台服务模式 : http://www.mojohaus.org/appassembler/appassembler-maven-plugin/generate-daemons-mojo.html -->

						<!-- 项目的基本目录,默认值为：${basedir}。 -->
						<basedir>${project.artifactId}</basedir>
						<!-- 可执行脚本的名称 -->
						<binFileName>${appassembler-bin-fileName}</binFileName>
						<!-- 一套守护进程生成配置（必填参数） -->
						<daemons>
							<daemon>
								<!-- 唯一ID，会影响生成的目录名 -->
								<id>${project.artifactId}</id>
								<environmentSetupFileName>setenv</environmentSetupFileName>
								<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>
								<platforms>
									<platform>jsw</platform>
								</platforms>
								<generatorConfigurations>
									<generatorConfiguration>
										<generator>jsw</generator>
										<includes>
											<!-- <include>aix-ppc-32</include>
											<include>aix-ppc-64</include>
											<include>hpux-parisc-64</include> -->
											<include>linux-x86-32</include>
											<include>linux-x86-64</include>
											<!-- <include>linux-ppc-64</include>
											<include>macosx-ppc-32</include>
											<include>macosx-x86-universal-32</include>
											<include>macosx-universal-32</include>
											<include>macosx-universal-64</include>
											<include>solaris-sparc-32</include>
											<include>solaris-sparc-64</include>
											<include>solaris-x86-32</include> -->
											<include>windows-x86-32</include>
											<include>windows-x86-64</include>
										</includes>
										<configuration>
											<property>
												<name>configuration.directory.in.classpath.first</name>
												<value>conf</value>
											</property>
											<property>
												<name>wrapper.ping.timeout</name>
												<value>120</value>
											</property>
											<property>
												<name>set.default.REPO_DIR</name>
												<value>lib</value>
											</property>
											<property>
												<name>wrapper.console.loglevel</name>
												<value>INFO</value>
											</property>
											<property>
												<name>wrapper.logfile</name>
												<value>logs/wrapper.log</value>
											</property>
											<property>
												<name>wrapper.logfile.loglevel</name>
												<value>ERROR</value>
											</property>
											<property>
												<name>wrapper.logfile.maxsize</name>
												<value>20m</value>
											</property>
											<property>
												<name>wrapper.logfile.maxfiles</name>
												<value>10</value>
											</property>
										</configuration>
									</generatorConfiguration>
								</generatorConfigurations>
								<jvmSettings>
									<!-- http://www.cnblogs.com/paddix/p/5309550.html -->
									<!-- http://unixboy.iteye.com/blog/174173/ -->
									<extraArguments>
										<!-- 设置年轻代大小为512M。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。
											   持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。
											   此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。 
										-->
										<extraArgument>-Xmn512M</extraArgument>	
										<!-- 设置JVM促使内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。  -->
										<extraArgument>-Xms1024M</extraArgument>
										<!-- 设置JVM最大可用内存为1024M -->
										<extraArgument>-Xmx1024M</extraArgument>
										<!-- 初始元空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值。 -->
										<extraArgument>-XX:MetaspaceSize=512M</extraArgument>
										<!-- 最大空间，默认是没有限制的 -->
										<extraArgument>-XX:MaxMetaspaceSize=512M</extraArgument>
										<!-- 设置年轻代初始值为256M，表示新生代初始内存的大小，应该小于-Xms的值； -->
										<!-- <extraArgument>-XX:NewSize=256M</extraArgument> -->
										<!-- 设置年轻代最大值为512M，表示新生代可被分配的内存的最大上限；当然这个值应该小于-Xmx的值； -->
										<!-- <extraArgument>-XX:MaxNewSize=512M</extraArgument> -->
										<!-- 设置年轻代中Eden区与一个Survivor区的比值。表示Edgen为一个Survivor的4倍，即1个Survivor区占整个年轻代大小的1/6 -->
										<extraArgument>-XX:SurvivorRatio=4</extraArgument>
										<!-- 设置老年代与年轻代（包括1个Eden和2个Survivor区）的比值。表示老年代是年轻代的4倍 -->
										<extraArgument>-XX:NewRatio=4</extraArgument>
										<!-- 设置让大于此阈值的对象直接分配在老年代（只对Serial、ParNew收集器有效），单位为字节 -->
										<!-- <extraArgument>-XX:PretenureSizeThreadshold=1024</extraArgument> -->
										<!-- 指定使用G1圾收集器 -->
										<extraArgument>-XX:+UseG1GC</extraArgument>
										<!-- 解锁实验性虚拟机标志 -->
										<extraArgument>-XX:+UnlockExperimentalVMOptions</extraArgument>
										<extraArgument>-XX:+UnlockDiagnosticVMOptions</extraArgument>
										<!-- 设置的 G1 区域的大小.值是 2 的幂,范围是 1 MB 到 32 MB 之间.目标是根据最小的 Java 堆大小划分出约 2048 个区域. -->
										<extraArgument>-XX:G1HeapRegionSize=8</extraArgument>
										<!-- 为所需的最长暂停时间, 设置目标值.默认值是 200 毫秒.如果MaxGCPauseMillis设置的过小,GC就会频繁,吞吐量就会下降.如果MaxGCPauseMillis设置的过大,应用程序暂停时间就会变长.G1的默认暂停时间是200毫秒. -->
										<extraArgument>-XX:MaxGCPauseMillis=200</extraArgument>
										<!-- 设置要用作年轻代大小最小值的堆百分比.默认值是 Java 堆的 5%.这是一个实验性的标志.有关示例,请参见“如何解锁实验性虚拟机标志”.此设置取代了 -XX:DefaultMinNewGenPercent 设置.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1NewSizePercent=5</extraArgument>
										<!-- # 设置要用作年轻代大小最大值的堆大小百分比.默认值是 Java 堆的 60%.这是一个实验性的标志.此设置取代了 -XX:DefaultMaxNewGenPercent 设置.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1MaxNewSizePercent=60</extraArgument>
										<!-- 配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等。 -->
										<!-- 设置 STW 工作线程数的值.将 n 的值设置为逻辑处理器的数量 .n 的值与逻辑处理器的数量相同,最多为 8. -->
										<!-- 如果逻辑处理器不止八个,则将 n 的值设置为逻辑处理器数的 5/8 左右.这适用于大多数情况, 除非是较大的 SPARC 系统,其中 n 的值可以是逻辑处理器数的 5/16 左右. -->
										<extraArgument>-XX:ParallelGCThreads=10</extraArgument>
										<!-- 设置并行标记的线程数.将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 1/4 左右. -->
										<extraArgument>-XX:ConcGCThreads=8</extraArgument>
										<!-- 设置触发标记周期的 Java 堆占用率阈值.默认占用率是整个 Java 堆的 45%. -->
										<extraArgument>-XX:InitiatingHeapOccupancyPercent=45</extraArgument>
										<!-- 为混合垃圾回收周期中要包括的旧区域设置占用率阈值.默认占用率为 65%.这是一个实验性的标志.此设置取代了 -XX:G1OldCSetRegionLiveThresholdPercent 设置.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1MixedGCLiveThresholdPercent=65</extraArgument>
										<!-- 设置您愿意浪费的堆百分比.如果可回收百分比小于堆废物百分比,Java HotSpot VM 不会启动混合垃圾回收周期.默认值是 10%.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1HeapWastePercent=10</extraArgument>
										<!-- 设置标记周期完成后,对存活数据上限为 G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数.默认值是 8 次混合垃圾回收.混合回收的目标是要控制在此目标次数以内.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1MixedGCCountTarget=8</extraArgument>
										<!-- 设置混合垃圾回收期间要回收的最大旧区域数.默认值是 Java 堆的 10%.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1OldCSetRegionThresholdPercent=10</extraArgument>
										<!-- 设置作为空闲空间的预留内存百分比,以降低目标空间溢出的风险.默认值是 10%.增加或减少百分比时,请确保对总的 Java 堆调整相同的量.Java HotSpot VM build 23 中没有此设置. -->
										<extraArgument>-XX:G1ReservePercent=10</extraArgument>
										<!-- 手动开启Java String对象的分割工作,这个是JDK8u20之后新增的参数,主要用于相同String避免重复申请内存,节约Region的使用； -->
										<extraArgument>-XX:+UseStringDeduplication</extraArgument>
										<!-- 关闭GC时间过长系统自动检测OOM(OutOfMemory)提示GC overhead limit exceeded,目的是显示内存溢出异常,方便Wrapper Service检测到并重启 -->
										<extraArgument>-XX:-UseGCOverheadLimit</extraArgument>
										<!-- 表示一个对象如果在Survivor区移动了7次那下次MinorGC时就进入老年代。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代，对于需要大量常驻内存的应用， 
											这样做可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象在年轻代存活时间，增加对象在年轻代被垃圾回收的概率， 
											减少Full GC的频率，可以在某种程度上提高服务稳定性。默认值:15 -->
										<extraArgument>-XX:MaxTenuringThreshold=10</extraArgument>
										<!-- 取消 内存整理，G1GC 天生优势 --> 
										<extraArgument>-XX:-ResizePLAB</extraArgument>
										<extraArgument>-XX:+PrintAdaptiveSizePolicy</extraArgument>
										<extraArgument>-XX:+ParallelRefProcEnabled</extraArgument>
										<extraArgument>-XX:+G1SummarizeConcMark</extraArgument>
										<!-- 开启GC日志，等同于-verbose:gc 表示打开简化的GC日志 -->
										<extraArgument>-XX:+PrintGC</extraArgument>
										<!-- 在发生垃圾回收时打印内存回收日志，并在进程退出时输出当前内存各区域分配情况 -->
										<extraArgument>-XX:+PrintGCDetails</extraArgument>
										<!-- 打印出GC发生的具体时间 -->
										<extraArgument>-XX:+PrintGCDateStamps</extraArgument>
										<extraArgument>-XX:+PrintGCApplicationStoppedTime</extraArgument> <!-- 打印应用停留时间  -->
										<!-- 让JVM在每次MinorGC后打印出当前使用的Survivor中对象的年龄分布  -->
										<extraArgument>-XX:+PrintTenuringDistribution</extraArgument> 
										<!-- -Xloggc:<file> 表示把GC日志写入到一个文件中去，而不是打印到标准输出中 -->
										<extraArgument>-Xloggc:logs/gc.log</extraArgument>
										<extraArgument>-XX:+UseGCLogFileRotation</extraArgument>
										<extraArgument>-XX:NumberOfGCLogFiles=10</extraArgument>
										<extraArgument>-XX:GCLogFileSize=20M</extraArgument>
										<!--  当堆内存空间溢出时输出堆的内存快照 -->
										<extraArgument>-XX:+HeapDumpOnOutOfMemoryError</extraArgument>
										<extraArgument>-XX:HeapDumpPath=logs/heap.log</extraArgument>
									</extraArguments>
									<systemProperties>
										<systemProperty>java.security.policy=conf/policy.all</systemProperty>
										<!-- <systemProperty>com.sun.management.jmxremote</systemProperty>
										<systemProperty>com.sun.management.jmxremote.port=1984</systemProperty>
										<systemProperty>com.sun.management.jmxremote.authenticate=false</systemProperty>
										<systemProperty>com.sun.management.jmxremote.ssl=false</systemProperty> -->
									</systemProperties>
								</jvmSettings>
							</daemon>
						</daemons>
						<!-- JvmSettings describing min/max memory and stack size, system properties and extra arguments. -->
						<defaultJvmSettings>
							<initialMemorySize>256M</initialMemorySize>
							<maxMemorySize>1024M</maxMemorySize>
						</defaultJvmSettings>
						<!-- 生成的守护程序的目标目录。默认值为：${project.build.directory}/generated-resources/appassembler。 -->
						<target>${project.build.directory}/generated-resources/appassembler</target>
						<!-- 使用此选项覆盖当前内置的增量包二进制文件。您将需要将增量包版本解压缩到由此选项设置的已知位置。 <externalDeltaPackDirectory></externalDeltaPackDirectory> -->
						<!-- 使用此选项将已知文件的内容预插入到生成的包装器配置文件中。例如：$ include ../conf/another-wrapper.conf 
							User属性是：preWrapperConf。 <preWrapperConf></preWrapperConf> -->
						<!-- 启用时，名称包装器配置文件为wrapper - $ {daemon.id} .conf -->
						<useDaemonIdAsWrapperConfName>false</useDaemonIdAsWrapperConfName>
						<!-- 启用时，将包装器可执行文件前缀为${daemon.id}。否则，使用原始名称（即包装） -->
						<useDaemonIdAsWrapperExePrefixName>false</useDaemonIdAsWrapperExePrefixName>

					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-antrun-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<executions>
						<!-- 在Maven预打包阶段进行初步的脚本处理：拷贝配置文件、生成相关启停脚本 -->
						<execution>
							<id>prepare-resources</id>
							<phase>package</phase>
							<goals>
								<goal>run</goal>
							</goals>
							<configuration>
								<target>
									<echo message="antrun copy resources" />
	
									<!-- 处理脚本模式依赖资源 -->
								
									<!-- 步骤1、拷贝应用程序Jar文件 -->
									<copy file="${basedir}/sentinel-dashboard-${sentinel-dashboard.version}.jar"
										todir="${appassembler-dir}/${project.artifactId}/lib" />
										
									<!-- 步骤2、创建生产环境配置文件夹：拷贝配置文件以便覆盖默认配置 -->
									<mkdir dir="${appassembler-dir}/${project.artifactId}/conf" />
									<copy file="${project.build.directory}/classes/application.properties"
										todir="${appassembler-dir}/${project.artifactId}/conf" />
									 
									<!-- 步骤1、拷贝应用程序Jar文件 -->
									<copy file="${basedir}/sentinel-dashboard-${sentinel-dashboard.version}.jar"
										todir="${appassembler-jsw-dir}/${project.artifactId}/lib" />
									<!-- 步骤2、创建生产环境配置文件夹：拷贝配置文件以便覆盖默认配置 -->
									
									<mkdir dir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
									
									<copy file="${project.build.directory}/classes/application.properties"
										todir="${appassembler-jsw-dir}/${project.artifactId}/conf" />
										
								</target>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- 第一步：生成可执行的启动脚本 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
			</plugin>
			<!-- 第一步：通过antrun插件拷贝文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
			</plugin>
		</plugins>
	</build>


</project>
